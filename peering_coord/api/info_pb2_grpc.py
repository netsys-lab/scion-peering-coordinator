# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from peering_coord.api import info_pb2 as peering__coord_dot_api_dot_info__pb2


class InfoStub(object):
    """Non-essential informational services provided by the coordinator.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetOwner = channel.unary_unary(
                '/coord.api.Info/GetOwner',
                request_serializer=peering__coord_dot_api_dot_info__pb2.GetOwnerRequest.SerializeToString,
                response_deserializer=peering__coord_dot_api_dot_info__pb2.Owner.FromString,
                )
        self.SearchOwner = channel.unary_stream(
                '/coord.api.Info/SearchOwner',
                request_serializer=peering__coord_dot_api_dot_info__pb2.SearchOwnerRequest.SerializeToString,
                response_deserializer=peering__coord_dot_api_dot_info__pb2.Owner.FromString,
                )


class InfoServicer(object):
    """Non-essential informational services provided by the coordinator.
    """

    def GetOwner(self, request, context):
        """Retrieve information on an AS owner by owner name or by an AS.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchOwner(self, request, context):
        """Search for AS owners matching the given criteria.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InfoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOwner,
                    request_deserializer=peering__coord_dot_api_dot_info__pb2.GetOwnerRequest.FromString,
                    response_serializer=peering__coord_dot_api_dot_info__pb2.Owner.SerializeToString,
            ),
            'SearchOwner': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchOwner,
                    request_deserializer=peering__coord_dot_api_dot_info__pb2.SearchOwnerRequest.FromString,
                    response_serializer=peering__coord_dot_api_dot_info__pb2.Owner.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coord.api.Info', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Info(object):
    """Non-essential informational services provided by the coordinator.
    """

    @staticmethod
    def GetOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coord.api.Info/GetOwner',
            peering__coord_dot_api_dot_info__pb2.GetOwnerRequest.SerializeToString,
            peering__coord_dot_api_dot_info__pb2.Owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/coord.api.Info/SearchOwner',
            peering__coord_dot_api_dot_info__pb2.SearchOwnerRequest.SerializeToString,
            peering__coord_dot_api_dot_info__pb2.Owner.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
