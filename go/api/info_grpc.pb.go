// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	// Retrieve information on an AS owner by owner name or by an AS.
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*Owner, error)
	// Search for AS owners matching the given criteria.
	SearchOwner(ctx context.Context, in *SearchOwnerRequest, opts ...grpc.CallOption) (Info_SearchOwnerClient, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*Owner, error) {
	out := new(Owner)
	err := c.cc.Invoke(ctx, "/coord.api.Info/GetOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) SearchOwner(ctx context.Context, in *SearchOwnerRequest, opts ...grpc.CallOption) (Info_SearchOwnerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Info_ServiceDesc.Streams[0], "/coord.api.Info/SearchOwner", opts...)
	if err != nil {
		return nil, err
	}
	x := &infoSearchOwnerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Info_SearchOwnerClient interface {
	Recv() (*Owner, error)
	grpc.ClientStream
}

type infoSearchOwnerClient struct {
	grpc.ClientStream
}

func (x *infoSearchOwnerClient) Recv() (*Owner, error) {
	m := new(Owner)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	// Retrieve information on an AS owner by owner name or by an AS.
	GetOwner(context.Context, *GetOwnerRequest) (*Owner, error)
	// Search for AS owners matching the given criteria.
	SearchOwner(*SearchOwnerRequest, Info_SearchOwnerServer) error
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) GetOwner(context.Context, *GetOwnerRequest) (*Owner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedInfoServer) SearchOwner(*SearchOwnerRequest, Info_SearchOwnerServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOwner not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coord.api.Info/GetOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_SearchOwner_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchOwnerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InfoServer).SearchOwner(m, &infoSearchOwnerServer{stream})
}

type Info_SearchOwnerServer interface {
	Send(*Owner) error
	grpc.ServerStream
}

type infoSearchOwnerServer struct {
	grpc.ServerStream
}

func (x *infoSearchOwnerServer) Send(m *Owner) error {
	return x.ServerStream.SendMsg(m)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coord.api.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOwner",
			Handler:    _Info_GetOwner_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchOwner",
			Handler:       _Info_SearchOwner_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/info.proto",
}
