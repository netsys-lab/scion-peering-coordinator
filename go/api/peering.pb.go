// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: api/peering.proto

package api

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArbitrationUpdate_Status int32

const (
	ArbitrationUpdate_ERROR       ArbitrationUpdate_Status = 0
	ArbitrationUpdate_PRIMARY     ArbitrationUpdate_Status = 1
	ArbitrationUpdate_NOT_PRIMARY ArbitrationUpdate_Status = 2
)

// Enum value maps for ArbitrationUpdate_Status.
var (
	ArbitrationUpdate_Status_name = map[int32]string{
		0: "ERROR",
		1: "PRIMARY",
		2: "NOT_PRIMARY",
	}
	ArbitrationUpdate_Status_value = map[string]int32{
		"ERROR":       0,
		"PRIMARY":     1,
		"NOT_PRIMARY": 2,
	}
)

func (x ArbitrationUpdate_Status) Enum() *ArbitrationUpdate_Status {
	p := new(ArbitrationUpdate_Status)
	*p = x
	return p
}

func (x ArbitrationUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArbitrationUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_peering_proto_enumTypes[0].Descriptor()
}

func (ArbitrationUpdate_Status) Type() protoreflect.EnumType {
	return &file_api_peering_proto_enumTypes[0]
}

func (x ArbitrationUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArbitrationUpdate_Status.Descriptor instead.
func (ArbitrationUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{2, 0}
}

type LinkUpdate_Type int32

const (
	LinkUpdate_CREATE  LinkUpdate_Type = 0
	LinkUpdate_DESTROY LinkUpdate_Type = 1
)

// Enum value maps for LinkUpdate_Type.
var (
	LinkUpdate_Type_name = map[int32]string{
		0: "CREATE",
		1: "DESTROY",
	}
	LinkUpdate_Type_value = map[string]int32{
		"CREATE":  0,
		"DESTROY": 1,
	}
)

func (x LinkUpdate_Type) Enum() *LinkUpdate_Type {
	p := new(LinkUpdate_Type)
	*p = x
	return p
}

func (x LinkUpdate_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkUpdate_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_peering_proto_enumTypes[1].Descriptor()
}

func (LinkUpdate_Type) Type() protoreflect.EnumType {
	return &file_api_peering_proto_enumTypes[1]
}

func (x LinkUpdate_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkUpdate_Type.Descriptor instead.
func (LinkUpdate_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{3, 0}
}

type LinkUpdate_LinkType int32

const (
	LinkUpdate_PEERING  LinkUpdate_LinkType = 0
	LinkUpdate_CORE     LinkUpdate_LinkType = 1
	LinkUpdate_PROVIDER LinkUpdate_LinkType = 2
)

// Enum value maps for LinkUpdate_LinkType.
var (
	LinkUpdate_LinkType_name = map[int32]string{
		0: "PEERING",
		1: "CORE",
		2: "PROVIDER",
	}
	LinkUpdate_LinkType_value = map[string]int32{
		"PEERING":  0,
		"CORE":     1,
		"PROVIDER": 2,
	}
)

func (x LinkUpdate_LinkType) Enum() *LinkUpdate_LinkType {
	p := new(LinkUpdate_LinkType)
	*p = x
	return p
}

func (x LinkUpdate_LinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkUpdate_LinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_peering_proto_enumTypes[2].Descriptor()
}

func (LinkUpdate_LinkType) Type() protoreflect.EnumType {
	return &file_api_peering_proto_enumTypes[2]
}

func (x LinkUpdate_LinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkUpdate_LinkType.Descriptor instead.
func (LinkUpdate_LinkType) EnumDescriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{3, 1}
}

type AsyncError_Code int32

const (
	AsyncError_UNSPECIFIED          AsyncError_Code = 0
	AsyncError_LINK_CREATION_FAILED AsyncError_Code = 1
)

// Enum value maps for AsyncError_Code.
var (
	AsyncError_Code_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LINK_CREATION_FAILED",
	}
	AsyncError_Code_value = map[string]int32{
		"UNSPECIFIED":          0,
		"LINK_CREATION_FAILED": 1,
	}
)

func (x AsyncError_Code) Enum() *AsyncError_Code {
	p := new(AsyncError_Code)
	*p = x
	return p
}

func (x AsyncError_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsyncError_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_api_peering_proto_enumTypes[3].Descriptor()
}

func (AsyncError_Code) Type() protoreflect.EnumType {
	return &file_api_peering_proto_enumTypes[3]
}

func (x AsyncError_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsyncError_Code.Descriptor instead.
func (AsyncError_Code) EnumDescriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{4, 0}
}

// Client to coordinator message sent on the persistent stream channel.
type StreamMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*StreamMessageRequest_Arbitration
	Request isStreamMessageRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamMessageRequest) Reset() {
	*x = StreamMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessageRequest) ProtoMessage() {}

func (x *StreamMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessageRequest.ProtoReflect.Descriptor instead.
func (*StreamMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{0}
}

func (m *StreamMessageRequest) GetRequest() isStreamMessageRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamMessageRequest) GetArbitration() *ArbitrationUpdate {
	if x, ok := x.GetRequest().(*StreamMessageRequest_Arbitration); ok {
		return x.Arbitration
	}
	return nil
}

type isStreamMessageRequest_Request interface {
	isStreamMessageRequest_Request()
}

type StreamMessageRequest_Arbitration struct {
	Arbitration *ArbitrationUpdate `protobuf:"bytes,1,opt,name=arbitration,proto3,oneof"`
}

func (*StreamMessageRequest_Arbitration) isStreamMessageRequest_Request() {}

// Coordinator to client message sent on the persistent stream channel.
type StreamMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*StreamMessageResponse_Arbitration
	//	*StreamMessageResponse_LinkUpdate
	//	*StreamMessageResponse_Error
	Response isStreamMessageResponse_Response `protobuf_oneof:"response"`
}

func (x *StreamMessageResponse) Reset() {
	*x = StreamMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMessageResponse) ProtoMessage() {}

func (x *StreamMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMessageResponse.ProtoReflect.Descriptor instead.
func (*StreamMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{1}
}

func (m *StreamMessageResponse) GetResponse() isStreamMessageResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *StreamMessageResponse) GetArbitration() *ArbitrationUpdate {
	if x, ok := x.GetResponse().(*StreamMessageResponse_Arbitration); ok {
		return x.Arbitration
	}
	return nil
}

func (x *StreamMessageResponse) GetLinkUpdate() *LinkUpdate {
	if x, ok := x.GetResponse().(*StreamMessageResponse_LinkUpdate); ok {
		return x.LinkUpdate
	}
	return nil
}

func (x *StreamMessageResponse) GetError() *AsyncError {
	if x, ok := x.GetResponse().(*StreamMessageResponse_Error); ok {
		return x.Error
	}
	return nil
}

type isStreamMessageResponse_Response interface {
	isStreamMessageResponse_Response()
}

type StreamMessageResponse_Arbitration struct {
	Arbitration *ArbitrationUpdate `protobuf:"bytes,1,opt,name=arbitration,proto3,oneof"`
}

type StreamMessageResponse_LinkUpdate struct {
	LinkUpdate *LinkUpdate `protobuf:"bytes,2,opt,name=link_update,json=linkUpdate,proto3,oneof"`
}

type StreamMessageResponse_Error struct {
	Error *AsyncError `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*StreamMessageResponse_Arbitration) isStreamMessageResponse_Response() {}

func (*StreamMessageResponse_LinkUpdate) isStreamMessageResponse_Response() {}

func (*StreamMessageResponse_Error) isStreamMessageResponse_Response() {}

// Used for requesting write permissions to the ASes peering policies. Since policies are AS wide,
// only one client (the primary client) is granted write permissions at any point in time.
// The primary client can be different for different VLANs.
// The coordinator uses the same message to notify clients whenever the primary client changes.
type ArbitrationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VLAN for which the client registers itself as potential primary client. If no VLAN is given
	// the client can be primary for all VLANs.
	// When the message is send from the coordinator this field is always set.
	//
	// Types that are assignable to Vlan_:
	//	*ArbitrationUpdate_Vlan
	Vlan_ isArbitrationUpdate_Vlan_ `protobuf_oneof:"vlan_"`
	// The client with the highest election_id becomes primary. If multiple clients use the same
	// election_id is is unspecified which one becomes primary.
	ElectionId int64 `protobuf:"varint,2,opt,name=election_id,json=electionId,proto3" json:"election_id,omitempty"`
	// Ignored on requests. The coordinator sets status on replies to indicated whether the client is
	// primary or not.
	Status ArbitrationUpdate_Status `protobuf:"varint,3,opt,name=status,proto3,enum=coord.api.ArbitrationUpdate_Status" json:"status,omitempty"`
}

func (x *ArbitrationUpdate) Reset() {
	*x = ArbitrationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArbitrationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitrationUpdate) ProtoMessage() {}

func (x *ArbitrationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitrationUpdate.ProtoReflect.Descriptor instead.
func (*ArbitrationUpdate) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{2}
}

func (m *ArbitrationUpdate) GetVlan_() isArbitrationUpdate_Vlan_ {
	if m != nil {
		return m.Vlan_
	}
	return nil
}

func (x *ArbitrationUpdate) GetVlan() string {
	if x, ok := x.GetVlan_().(*ArbitrationUpdate_Vlan); ok {
		return x.Vlan
	}
	return ""
}

func (x *ArbitrationUpdate) GetElectionId() int64 {
	if x != nil {
		return x.ElectionId
	}
	return 0
}

func (x *ArbitrationUpdate) GetStatus() ArbitrationUpdate_Status {
	if x != nil {
		return x.Status
	}
	return ArbitrationUpdate_ERROR
}

type isArbitrationUpdate_Vlan_ interface {
	isArbitrationUpdate_Vlan_()
}

type ArbitrationUpdate_Vlan struct {
	Vlan string `protobuf:"bytes,1,opt,name=vlan,proto3,oneof"`
}

func (*ArbitrationUpdate_Vlan) isArbitrationUpdate_Vlan_() {}

// Send from the coordinator to all clients of an AS when a new link becomes available or a
// previously available link is no longer desired.
type LinkUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the update. Whether to add or remove a link.
	Type LinkUpdate_Type `protobuf:"varint,1,opt,name=type,proto3,enum=coord.api.LinkUpdate_Type" json:"type,omitempty"`
	// Type of the SCION link.
	LinkType LinkUpdate_LinkType `protobuf:"varint,2,opt,name=link_type,json=linkType,proto3,enum=coord.api.LinkUpdate_LinkType" json:"link_type,omitempty"`
	// ASN of the peer.
	PeerAsn string `protobuf:"bytes,3,opt,name=peer_asn,json=peerAsn,proto3" json:"peer_asn,omitempty"`
	// Local underlay endpoint.
	Local *UnderlayAddress `protobuf:"bytes,4,opt,name=local,proto3" json:"local,omitempty"`
	// Remote underlay endpoint.
	Remote *UnderlayAddress `protobuf:"bytes,5,opt,name=remote,proto3" json:"remote,omitempty"`
}

func (x *LinkUpdate) Reset() {
	*x = LinkUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkUpdate) ProtoMessage() {}

func (x *LinkUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkUpdate.ProtoReflect.Descriptor instead.
func (*LinkUpdate) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{3}
}

func (x *LinkUpdate) GetType() LinkUpdate_Type {
	if x != nil {
		return x.Type
	}
	return LinkUpdate_CREATE
}

func (x *LinkUpdate) GetLinkType() LinkUpdate_LinkType {
	if x != nil {
		return x.LinkType
	}
	return LinkUpdate_PEERING
}

func (x *LinkUpdate) GetPeerAsn() string {
	if x != nil {
		return x.PeerAsn
	}
	return ""
}

func (x *LinkUpdate) GetLocal() *UnderlayAddress {
	if x != nil {
		return x.Local
	}
	return nil
}

func (x *LinkUpdate) GetRemote() *UnderlayAddress {
	if x != nil {
		return x.Remote
	}
	return nil
}

// Notifies the client of abnormal status conditions concerning its links or policies.
type AsyncError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    AsyncError_Code `protobuf:"varint,1,opt,name=code,proto3,enum=coord.api.AsyncError_Code" json:"code,omitempty"`
	Message string          `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AsyncError) Reset() {
	*x = AsyncError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AsyncError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AsyncError) ProtoMessage() {}

func (x *AsyncError) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AsyncError.ProtoReflect.Descriptor instead.
func (*AsyncError) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{4}
}

func (x *AsyncError) GetCode() AsyncError_Code {
	if x != nil {
		return x.Code
	}
	return AsyncError_UNSPECIFIED
}

func (x *AsyncError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Endpoint in the IP/UDP underlay.
type UnderlayAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Underlay IPv4/IPv6 address.
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// Underlay UDP port.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UnderlayAddress) Reset() {
	*x = UnderlayAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderlayAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlayAddress) ProtoMessage() {}

func (x *UnderlayAddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlayAddress.ProtoReflect.Descriptor instead.
func (*UnderlayAddress) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{5}
}

func (x *UnderlayAddress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UnderlayAddress) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VLAN of the interface the range applies to.
	InterfaceVlan string `protobuf:"bytes,1,opt,name=interface_vlan,json=interfaceVlan,proto3" json:"interface_vlan,omitempty"`
	// IP of the interface the range applies to.
	InterfaceIp string `protobuf:"bytes,2,opt,name=interface_ip,json=interfaceIp,proto3" json:"interface_ip,omitempty"`
	// First UDP port to assign to SCION links.
	FirstPort uint32 `protobuf:"varint,3,opt,name=first_port,json=firstPort,proto3" json:"first_port,omitempty"`
	// One past the last UDP port to assign to SCION links.
	LastPort uint32 `protobuf:"varint,4,opt,name=last_port,json=lastPort,proto3" json:"last_port,omitempty"`
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{6}
}

func (x *PortRange) GetInterfaceVlan() string {
	if x != nil {
		return x.InterfaceVlan
	}
	return ""
}

func (x *PortRange) GetInterfaceIp() string {
	if x != nil {
		return x.InterfaceIp
	}
	return ""
}

func (x *PortRange) GetFirstPort() uint32 {
	if x != nil {
		return x.FirstPort
	}
	return 0
}

func (x *PortRange) GetLastPort() uint32 {
	if x != nil {
		return x.LastPort
	}
	return 0
}

type ListPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Optional) Filter for VLAN.
	Vlan string `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// (Optional) Filter for AS. If given, has to be the same as the AS making the request.
	Asn string `protobuf:"bytes,2,opt,name=asn,proto3" json:"asn,omitempty"`
	// (Optional) Filter for accept or deny rules.
	//
	// Types that are assignable to Accept_:
	//	*ListPolicyRequest_Accept
	Accept_ isListPolicyRequest_Accept_ `protobuf_oneof:"accept_"`
	// (Optional) Filter for default rules, peer AS, owner, or ISD.
	//
	// Types that are assignable to Peer:
	//	*ListPolicyRequest_PeerAsn
	//	*ListPolicyRequest_PeerOwner
	//	*ListPolicyRequest_PeerIsd
	//	*ListPolicyRequest_PeerEveryone
	Peer isListPolicyRequest_Peer `protobuf_oneof:"peer"`
}

func (x *ListPolicyRequest) Reset() {
	*x = ListPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyRequest) ProtoMessage() {}

func (x *ListPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyRequest.ProtoReflect.Descriptor instead.
func (*ListPolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{7}
}

func (x *ListPolicyRequest) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *ListPolicyRequest) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (m *ListPolicyRequest) GetAccept_() isListPolicyRequest_Accept_ {
	if m != nil {
		return m.Accept_
	}
	return nil
}

func (x *ListPolicyRequest) GetAccept() bool {
	if x, ok := x.GetAccept_().(*ListPolicyRequest_Accept); ok {
		return x.Accept
	}
	return false
}

func (m *ListPolicyRequest) GetPeer() isListPolicyRequest_Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (x *ListPolicyRequest) GetPeerAsn() string {
	if x, ok := x.GetPeer().(*ListPolicyRequest_PeerAsn); ok {
		return x.PeerAsn
	}
	return ""
}

func (x *ListPolicyRequest) GetPeerOwner() string {
	if x, ok := x.GetPeer().(*ListPolicyRequest_PeerOwner); ok {
		return x.PeerOwner
	}
	return ""
}

func (x *ListPolicyRequest) GetPeerIsd() string {
	if x, ok := x.GetPeer().(*ListPolicyRequest_PeerIsd); ok {
		return x.PeerIsd
	}
	return ""
}

func (x *ListPolicyRequest) GetPeerEveryone() *empty.Empty {
	if x, ok := x.GetPeer().(*ListPolicyRequest_PeerEveryone); ok {
		return x.PeerEveryone
	}
	return nil
}

type isListPolicyRequest_Accept_ interface {
	isListPolicyRequest_Accept_()
}

type ListPolicyRequest_Accept struct {
	Accept bool `protobuf:"varint,3,opt,name=accept,proto3,oneof"`
}

func (*ListPolicyRequest_Accept) isListPolicyRequest_Accept_() {}

type isListPolicyRequest_Peer interface {
	isListPolicyRequest_Peer()
}

type ListPolicyRequest_PeerAsn struct {
	PeerAsn string `protobuf:"bytes,4,opt,name=peer_asn,json=peerAsn,proto3,oneof"`
}

type ListPolicyRequest_PeerOwner struct {
	PeerOwner string `protobuf:"bytes,5,opt,name=peer_owner,json=peerOwner,proto3,oneof"`
}

type ListPolicyRequest_PeerIsd struct {
	PeerIsd string `protobuf:"bytes,6,opt,name=peer_isd,json=peerIsd,proto3,oneof"`
}

type ListPolicyRequest_PeerEveryone struct {
	PeerEveryone *empty.Empty `protobuf:"bytes,7,opt,name=peer_everyone,json=peerEveryone,proto3,oneof"`
}

func (*ListPolicyRequest_PeerAsn) isListPolicyRequest_Peer() {}

func (*ListPolicyRequest_PeerOwner) isListPolicyRequest_Peer() {}

func (*ListPolicyRequest_PeerIsd) isListPolicyRequest_Peer() {}

func (*ListPolicyRequest_PeerEveryone) isListPolicyRequest_Peer() {}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VLAN the policy applies to.
	Vlan string `protobuf:"bytes,1,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// AS owning the policy.
	Asn string `protobuf:"bytes,2,opt,name=asn,proto3" json:"asn,omitempty"`
	// Whether the peer or group of peers is accepted or rejected.
	Accept bool `protobuf:"varint,3,opt,name=accept,proto3" json:"accept,omitempty"`
	// Peer(s) the rule applies to.
	//
	// Types that are assignable to Peer:
	//	*Policy_PeerAsn
	//	*Policy_PeerOwner
	//	*Policy_PeerIsd
	Peer isPolicy_Peer `protobuf_oneof:"peer"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{8}
}

func (x *Policy) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *Policy) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *Policy) GetAccept() bool {
	if x != nil {
		return x.Accept
	}
	return false
}

func (m *Policy) GetPeer() isPolicy_Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (x *Policy) GetPeerAsn() string {
	if x, ok := x.GetPeer().(*Policy_PeerAsn); ok {
		return x.PeerAsn
	}
	return ""
}

func (x *Policy) GetPeerOwner() string {
	if x, ok := x.GetPeer().(*Policy_PeerOwner); ok {
		return x.PeerOwner
	}
	return ""
}

func (x *Policy) GetPeerIsd() string {
	if x, ok := x.GetPeer().(*Policy_PeerIsd); ok {
		return x.PeerIsd
	}
	return ""
}

type isPolicy_Peer interface {
	isPolicy_Peer()
}

type Policy_PeerAsn struct {
	PeerAsn string `protobuf:"bytes,4,opt,name=peer_asn,json=peerAsn,proto3,oneof"`
}

type Policy_PeerOwner struct {
	PeerOwner string `protobuf:"bytes,5,opt,name=peer_owner,json=peerOwner,proto3,oneof"`
}

type Policy_PeerIsd struct {
	PeerIsd string `protobuf:"bytes,6,opt,name=peer_isd,json=peerIsd,proto3,oneof"`
}

func (*Policy_PeerAsn) isPolicy_Peer() {}

func (*Policy_PeerOwner) isPolicy_Peer() {}

func (*Policy_PeerIsd) isPolicy_Peer() {}

type SetPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policies to install. Must all be for the VLAN specified in 'vlan' if 'vlan' is not empty.
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// (Optional) VLAN to replace policies in. If given, only policies in the specified VLAN are
	// reset and subsequently replaced by the policies provided in 'policies'. Otherwise policies in
	// all VLANs are replaced.
	Vlan string `protobuf:"bytes,2,opt,name=vlan,proto3" json:"vlan,omitempty"`
	// Whether to install the policies even when some of them are invalid and have been ignored.
	ContinueOnError bool `protobuf:"varint,3,opt,name=continue_on_error,json=continueOnError,proto3" json:"continue_on_error,omitempty"`
}

func (x *SetPoliciesRequest) Reset() {
	*x = SetPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPoliciesRequest) ProtoMessage() {}

func (x *SetPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPoliciesRequest.ProtoReflect.Descriptor instead.
func (*SetPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{9}
}

func (x *SetPoliciesRequest) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *SetPoliciesRequest) GetVlan() string {
	if x != nil {
		return x.Vlan
	}
	return ""
}

func (x *SetPoliciesRequest) GetContinueOnError() bool {
	if x != nil {
		return x.ContinueOnError
	}
	return false
}

type SetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Policies which have failed validation.
	RejectedPolicies []*Policy `protobuf:"bytes,1,rep,name=rejected_policies,json=rejectedPolicies,proto3" json:"rejected_policies,omitempty"`
	// Error messages corresponding to the rejected policies.
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SetPoliciesResponse) Reset() {
	*x = SetPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_peering_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPoliciesResponse) ProtoMessage() {}

func (x *SetPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_peering_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*SetPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_api_peering_proto_rawDescGZIP(), []int{10}
}

func (x *SetPoliciesResponse) GetRejectedPolicies() []*Policy {
	if x != nil {
		return x.RejectedPolicies
	}
	return nil
}

func (x *SetPoliciesResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_api_peering_proto protoreflect.FileDescriptor

var file_api_peering_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x14, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xce, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x72,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x62, 0x69,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x61, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc3, 0x01, 0x0a, 0x11, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x62, 0x69, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x31, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x42, 0x07,
	0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x22, 0xcc, 0x02, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x30,
	0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x22, 0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x54,
	0x52, 0x4f, 0x59, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56,
	0x49, 0x44, 0x45, 0x52, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x73, 0x79, 0x6e, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x31, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4e, 0x4b,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x22, 0x35, 0x0a, 0x0f, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x09, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x80, 0x02,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x41, 0x73, 0x6e,
	0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49, 0x73, 0x64, 0x12, 0x3d,
	0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x01, 0x52,
	0x0c, 0x70, 0x65, 0x65, 0x72, 0x45, 0x76, 0x65, 0x72, 0x79, 0x6f, 0x6e, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x22, 0xa9, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x41, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x73, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x73, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x83, 0x01, 0x0a,
	0x12, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x76, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x4f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x6d, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x32, 0xae, 0x03, 0x0a, 0x07, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a,
	0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f,
	0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3e, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x11, 0x2e, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a,
	0x11, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x11, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6e, 0x65, 0x74, 0x73, 0x79, 0x73, 0x2d, 0x6c, 0x61, 0x62, 0x2f, 0x73, 0x63, 0x69, 0x6f,
	0x6e, 0x2d, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_peering_proto_rawDescOnce sync.Once
	file_api_peering_proto_rawDescData = file_api_peering_proto_rawDesc
)

func file_api_peering_proto_rawDescGZIP() []byte {
	file_api_peering_proto_rawDescOnce.Do(func() {
		file_api_peering_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_peering_proto_rawDescData)
	})
	return file_api_peering_proto_rawDescData
}

var file_api_peering_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_api_peering_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_peering_proto_goTypes = []interface{}{
	(ArbitrationUpdate_Status)(0), // 0: coord.api.ArbitrationUpdate.Status
	(LinkUpdate_Type)(0),          // 1: coord.api.LinkUpdate.Type
	(LinkUpdate_LinkType)(0),      // 2: coord.api.LinkUpdate.LinkType
	(AsyncError_Code)(0),          // 3: coord.api.AsyncError.Code
	(*StreamMessageRequest)(nil),  // 4: coord.api.StreamMessageRequest
	(*StreamMessageResponse)(nil), // 5: coord.api.StreamMessageResponse
	(*ArbitrationUpdate)(nil),     // 6: coord.api.ArbitrationUpdate
	(*LinkUpdate)(nil),            // 7: coord.api.LinkUpdate
	(*AsyncError)(nil),            // 8: coord.api.AsyncError
	(*UnderlayAddress)(nil),       // 9: coord.api.UnderlayAddress
	(*PortRange)(nil),             // 10: coord.api.PortRange
	(*ListPolicyRequest)(nil),     // 11: coord.api.ListPolicyRequest
	(*Policy)(nil),                // 12: coord.api.Policy
	(*SetPoliciesRequest)(nil),    // 13: coord.api.SetPoliciesRequest
	(*SetPoliciesResponse)(nil),   // 14: coord.api.SetPoliciesResponse
	(*empty.Empty)(nil),           // 15: google.protobuf.Empty
}
var file_api_peering_proto_depIdxs = []int32{
	6,  // 0: coord.api.StreamMessageRequest.arbitration:type_name -> coord.api.ArbitrationUpdate
	6,  // 1: coord.api.StreamMessageResponse.arbitration:type_name -> coord.api.ArbitrationUpdate
	7,  // 2: coord.api.StreamMessageResponse.link_update:type_name -> coord.api.LinkUpdate
	8,  // 3: coord.api.StreamMessageResponse.error:type_name -> coord.api.AsyncError
	0,  // 4: coord.api.ArbitrationUpdate.status:type_name -> coord.api.ArbitrationUpdate.Status
	1,  // 5: coord.api.LinkUpdate.type:type_name -> coord.api.LinkUpdate.Type
	2,  // 6: coord.api.LinkUpdate.link_type:type_name -> coord.api.LinkUpdate.LinkType
	9,  // 7: coord.api.LinkUpdate.local:type_name -> coord.api.UnderlayAddress
	9,  // 8: coord.api.LinkUpdate.remote:type_name -> coord.api.UnderlayAddress
	3,  // 9: coord.api.AsyncError.code:type_name -> coord.api.AsyncError.Code
	15, // 10: coord.api.ListPolicyRequest.peer_everyone:type_name -> google.protobuf.Empty
	12, // 11: coord.api.SetPoliciesRequest.policies:type_name -> coord.api.Policy
	12, // 12: coord.api.SetPoliciesResponse.rejected_policies:type_name -> coord.api.Policy
	4,  // 13: coord.api.Peering.StreamChannel:input_type -> coord.api.StreamMessageRequest
	10, // 14: coord.api.Peering.SetPortRange:input_type -> coord.api.PortRange
	11, // 15: coord.api.Peering.ListPolicies:input_type -> coord.api.ListPolicyRequest
	12, // 16: coord.api.Peering.CreatePolicy:input_type -> coord.api.Policy
	12, // 17: coord.api.Peering.DestroyPolicy:input_type -> coord.api.Policy
	13, // 18: coord.api.Peering.SetPolicies:input_type -> coord.api.SetPoliciesRequest
	5,  // 19: coord.api.Peering.StreamChannel:output_type -> coord.api.StreamMessageResponse
	15, // 20: coord.api.Peering.SetPortRange:output_type -> google.protobuf.Empty
	12, // 21: coord.api.Peering.ListPolicies:output_type -> coord.api.Policy
	12, // 22: coord.api.Peering.CreatePolicy:output_type -> coord.api.Policy
	15, // 23: coord.api.Peering.DestroyPolicy:output_type -> google.protobuf.Empty
	14, // 24: coord.api.Peering.SetPolicies:output_type -> coord.api.SetPoliciesResponse
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_peering_proto_init() }
func file_api_peering_proto_init() {
	if File_api_peering_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_peering_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArbitrationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AsyncError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderlayAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_peering_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_peering_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamMessageRequest_Arbitration)(nil),
	}
	file_api_peering_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamMessageResponse_Arbitration)(nil),
		(*StreamMessageResponse_LinkUpdate)(nil),
		(*StreamMessageResponse_Error)(nil),
	}
	file_api_peering_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ArbitrationUpdate_Vlan)(nil),
	}
	file_api_peering_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ListPolicyRequest_Accept)(nil),
		(*ListPolicyRequest_PeerAsn)(nil),
		(*ListPolicyRequest_PeerOwner)(nil),
		(*ListPolicyRequest_PeerIsd)(nil),
		(*ListPolicyRequest_PeerEveryone)(nil),
	}
	file_api_peering_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Policy_PeerAsn)(nil),
		(*Policy_PeerOwner)(nil),
		(*Policy_PeerIsd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_peering_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_peering_proto_goTypes,
		DependencyIndexes: file_api_peering_proto_depIdxs,
		EnumInfos:         file_api_peering_proto_enumTypes,
		MessageInfos:      file_api_peering_proto_msgTypes,
	}.Build()
	File_api_peering_proto = out.File
	file_api_peering_proto_rawDesc = nil
	file_api_peering_proto_goTypes = nil
	file_api_peering_proto_depIdxs = nil
}
